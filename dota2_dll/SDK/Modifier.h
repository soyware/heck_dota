#pragma once

enum modifierstate
{
	MODIFIER_STATE_ROOTED = 0,
	MODIFIER_STATE_DISARMED = 1,
	MODIFIER_STATE_ATTACK_IMMUNE = 2,
	MODIFIER_STATE_SILENCED = 3,
	MODIFIER_STATE_MUTED = 4,
	MODIFIER_STATE_STUNNED = 5,
	MODIFIER_STATE_HEXED = 6,
	MODIFIER_STATE_INVISIBLE = 7,
	MODIFIER_STATE_INVULNERABLE = 8,
	MODIFIER_STATE_MAGIC_IMMUNE = 9,
	MODIFIER_STATE_PROVIDES_VISION = 10,
	MODIFIER_STATE_NIGHTMARED = 11,
	MODIFIER_STATE_BLOCK_DISABLED = 12,
	MODIFIER_STATE_EVADE_DISABLED = 13,
	MODIFIER_STATE_UNSELECTABLE = 14,
	MODIFIER_STATE_CANNOT_TARGET_ENEMIES = 15,
	MODIFIER_STATE_CANNOT_MISS = 16,
	MODIFIER_STATE_SPECIALLY_DENIABLE = 17,
	MODIFIER_STATE_FROZEN = 18,
	MODIFIER_STATE_COMMAND_RESTRICTED = 19,
	MODIFIER_STATE_NOT_ON_MINIMAP = 20,
	MODIFIER_STATE_LOW_ATTACK_PRIORITY = 21,
	MODIFIER_STATE_NO_HEALTH_BAR = 22,
	MODIFIER_STATE_FLYING = 23,
	MODIFIER_STATE_NO_UNIT_COLLISION = 24,
	MODIFIER_STATE_NO_TEAM_MOVE_TO = 25,
	MODIFIER_STATE_NO_TEAM_SELECT = 26,
	MODIFIER_STATE_PASSIVES_DISABLED = 27,
	MODIFIER_STATE_DOMINATED = 28,
	MODIFIER_STATE_BLIND = 29,
	MODIFIER_STATE_OUT_OF_GAME = 30,
	MODIFIER_STATE_FAKE_ALLY = 31,
	MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY = 32,
	MODIFIER_STATE_TRUESIGHT_IMMUNE = 33,
	MODIFIER_STATE_UNTARGETABLE = 34,
	MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS = 35,
	MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES = 36,
	MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES = 37,
	MODIFIER_STATE_UNSLOWABLE = 38,
	MODIFIER_STATE_TETHERED = 39,
	MODIFIER_STATE_IGNORING_STOP_ORDERS = 40,
	MODIFIER_STATE_FEARED = 41,
	MODIFIER_STATE_TAUNTED = 42,
	MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED = 43,
	MODIFIER_STATE_FORCED_FLYING_VISION = 44,
	MODIFIER_STATE_ATTACK_ALLIES = 45,
	MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS = 46,
	MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE = 47,
	MODIFIER_STATE_SPECIALLY_UNDENIABLE = 48,
	MODIFIER_STATE_LAST = 49,
};

enum modifierfunction
{
	 MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE = 0,
	 MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_TARGET = 1,
	 MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC = 2,
	 MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT = 3,
	 MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE = 4,
	 MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL = 5,
	 MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL = 6,
	 MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE = 7,
	 MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL_TARGET = 8,
	 MODIFIER_PROPERTY_PROCATTACK_FEEDBACK    = 9,
	 MODIFIER_PROPERTY_OVERRIDE_ATTACK_DAMAGE = 10,
	 MODIFIER_PROPERTY_PRE_ATTACK             = 11,
	 MODIFIER_PROPERTY_INVISIBILITY_LEVEL     = 12,
	 MODIFIER_PROPERTY_INVISIBILITY_ATTACK_BEHAVIOR_EXCEPTION = 13,
	 MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY = 14,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT = 15,
	 MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE = 16,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE = 17,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE = 18,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2 = 19,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE = 20,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2 = 21,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE = 22,
	 MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT_UNIQUE_2 = 23,
	 MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE     = 24,
	 MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN = 25,
	 MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MAX = 26,
	 MODIFIER_PROPERTY_IGNORE_MOVESPEED_LIMIT = 27,
	 MODIFIER_PROPERTY_MOVESPEED_LIMIT        = 28,
	 MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE = 29,
	 MODIFIER_PROPERTY_FIXED_ATTACK_RATE      = 30,
	 MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT = 31,
	 MODIFIER_PROPERTY_IGNORE_ATTACKSPEED_LIMIT = 32,
	 MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT = 33,
	 MODIFIER_PROPERTY_MANACOST_REDUCTION_CONSTANT = 34,
	 MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT = 35,
	 MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT_ADJUST = 36,
	 MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT  = 37,
	 MODIFIER_PROPERTY_BONUSDAMAGEOUTGOING_PERCENTAGE = 38,
	 MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE = 39,
	 MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION = 40,
	 MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION_AMPLIFY = 41,
	 MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE = 42,
	 MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_CREEP = 43,
	 MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE = 44,
	 MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE_UNIQUE = 45,
	 MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_SOURCE = 46,
	 MODIFIER_PROPERTY_HEAL_AMPLIFY_PERCENTAGE_TARGET = 47,
	 MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE = 48,
	 MODIFIER_PROPERTY_LIFESTEAL_AMPLIFY_PERCENTAGE = 49,
	 MODIFIER_PROPERTY_SPELL_LIFESTEAL_AMPLIFY_PERCENTAGE = 50,
	 MODIFIER_PROPERTY_MP_REGEN_AMPLIFY_PERCENTAGE = 51,
	 MODIFIER_PROPERTY_MANA_DRAIN_AMPLIFY_PERCENTAGE = 52,
	 MODIFIER_PROPERTY_MP_RESTORE_AMPLIFY_PERCENTAGE = 53,
	 MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE = 54,
	 MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE = 55,
	 MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE = 56,
	 MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE = 57,
	 MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT = 58,
	 MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT = 59,
	 MODIFIER_PROPERTY_EVASION_CONSTANT       = 60,
	 MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT = 61,
	 MODIFIER_PROPERTY_STATUS_RESISTANCE      = 62,
	 MODIFIER_PROPERTY_STATUS_RESISTANCE_STACKING = 63,
	 MODIFIER_PROPERTY_STATUS_RESISTANCE_CASTER = 64,
	 MODIFIER_PROPERTY_AVOID_DAMAGE           = 65,
	 MODIFIER_PROPERTY_AVOID_SPELL            = 66,
	 MODIFIER_PROPERTY_MISS_PERCENTAGE        = 67,
	 MODIFIER_PROPERTY_PHYSICAL_ARMOR_BASE_PERCENTAGE = 68,
	 MODIFIER_PROPERTY_PHYSICAL_ARMOR_TOTAL_PERCENTAGE = 69,
	 MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS   = 70,
	 MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE = 71,
	 MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE = 72,
	 MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR  = 73,
	 MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BASE_REDUCTION = 74,
	 MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION = 75,
	 MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS = 76,
	 MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS_ILLUSIONS = 77,
	 MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE = 78,
	 MODIFIER_PROPERTY_BASE_MANA_REGEN        = 79,
	 MODIFIER_PROPERTY_MANA_REGEN_CONSTANT    = 80,
	 MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE = 81,
	 MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE = 82,
	 MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT  = 83,
	 MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE = 84,
	 MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE_UNIQUE = 85,
	 MODIFIER_PROPERTY_HEALTH_BONUS           = 86,
	 MODIFIER_PROPERTY_MANA_BONUS             = 87,
	 MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS   = 88,
	 MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS     = 89,
	 MODIFIER_PROPERTY_EXTRA_MANA_BONUS       = 90,
	 MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE = 91,
	 MODIFIER_PROPERTY_EXTRA_MANA_PERCENTAGE  = 92,
	 MODIFIER_PROPERTY_STATS_STRENGTH_BONUS   = 93,
	 MODIFIER_PROPERTY_STATS_AGILITY_BONUS    = 94,
	 MODIFIER_PROPERTY_STATS_INTELLECT_BONUS  = 95,
	 MODIFIER_PROPERTY_STATS_STRENGTH_BONUS_PERCENTAGE = 96,
	 MODIFIER_PROPERTY_STATS_AGILITY_BONUS_PERCENTAGE = 97,
	 MODIFIER_PROPERTY_STATS_INTELLECT_BONUS_PERCENTAGE = 98,
	 MODIFIER_PROPERTY_CAST_RANGE_BONUS       = 99,
	 MODIFIER_PROPERTY_CAST_RANGE_BONUS_TARGET = 100,
	 MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING = 101,
	 MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE = 102,
	 MODIFIER_PROPERTY_ATTACK_RANGE_BONUS     = 103,
	 MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE = 104,
	 MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_PERCENTAGE = 105,
	 MODIFIER_PROPERTY_MAX_ATTACK_RANGE       = 106,
	 MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS = 107,
	 MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS_PERCENTAGE = 108,
	 MODIFIER_PROPERTY_PROJECTILE_NAME        = 109,
	 MODIFIER_PROPERTY_REINCARNATION          = 110,
	 MODIFIER_PROPERTY_RESPAWNTIME            = 111,
	 MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE = 112,
	 MODIFIER_PROPERTY_RESPAWNTIME_STACKING   = 113,
	 MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE    = 114,
	 MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_ONGOING = 115,
	 MODIFIER_PROPERTY_CASTTIME_PERCENTAGE    = 116,
	 MODIFIER_PROPERTY_ATTACK_ANIM_TIME_PERCENTAGE = 117,
	 MODIFIER_PROPERTY_MANACOST_PERCENTAGE    = 118,
	 MODIFIER_PROPERTY_MANACOST_PERCENTAGE_STACKING = 119,
	 MODIFIER_PROPERTY_DEATHGOLDCOST          = 120,
	 MODIFIER_PROPERTY_EXP_RATE_BOOST         = 121,
	 MODIFIER_PROPERTY_GOLD_RATE_BOOST        = 122,
	 MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE = 123,
	 MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE = 124,
	 MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK = 125,
	 MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK = 126,
	 MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL = 127,
	 MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR = 128,
	 MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK   = 129,
	 MODIFIER_PROPERTY_OVERRIDE_ANIMATION     = 130,
	 MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT = 131,
	 MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE = 132,
	 MODIFIER_PROPERTY_ABSORB_SPELL           = 133,
	 MODIFIER_PROPERTY_REFLECT_SPELL          = 134,
	 MODIFIER_PROPERTY_DISABLE_AUTOATTACK     = 135,
	 MODIFIER_PROPERTY_BONUS_DAY_VISION       = 136,
	 MODIFIER_PROPERTY_BONUS_NIGHT_VISION     = 137,
	 MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE = 138,
	 MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE = 139,
	 MODIFIER_PROPERTY_FIXED_DAY_VISION       = 140,
	 MODIFIER_PROPERTY_FIXED_NIGHT_VISION     = 141,
	 MODIFIER_PROPERTY_MIN_HEALTH             = 142,
	 MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL = 143,
	 MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL = 144,
	 MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE = 145,
	 MODIFIER_PROPERTY_IS_ILLUSION            = 146,
	 MODIFIER_PROPERTY_ILLUSION_LABEL         = 147,
	 MODIFIER_PROPERTY_STRONG_ILLUSION        = 148,
	 MODIFIER_PROPERTY_SUPER_ILLUSION         = 149,
	 MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE = 150,
	 MODIFIER_PROPERTY_XP_DURING_DEATH        = 151,
	 MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE   = 152,
	 MODIFIER_PROPERTY_TURN_RATE_OVERRIDE     = 153,
	 MODIFIER_PROPERTY_DISABLE_HEALING        = 154,
	 MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK    = 155,
	 MODIFIER_PROPERTY_ALWAYS_ETHEREAL_ATTACK = 156,
	 MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL = 157,
	 MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH = 158,
	 MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER = 159,
	 MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER = 160,
	 MODIFIER_PROPERTY_UNIT_DISALLOW_UPGRADING = 161,
	 MODIFIER_PROPERTY_DODGE_PROJECTILE       = 162,
	 MODIFIER_PROPERTY_TRIGGER_COSMETIC_AND_END_ATTACK = 163,
	 MODIFIER_PROPERTY_MAX_DEBUFF_DURATION    = 164,
	 MODIFIER_PROPERTY_PRIMARY_STAT_DAMAGE_MULTIPLIER = 165,
	 MODIFIER_PROPERTY_PREATTACK_DEADLY_BLOW  = 166,
	 MODIFIER_PROPERTY_ALWAYS_AUTOATTACK_WHILE_HOLD_POSITION = 167,
	 MODIFIER_EVENT_ON_SPELL_TARGET_READY     = 168,
	 MODIFIER_EVENT_ON_ATTACK_RECORD          = 169,
	 MODIFIER_EVENT_ON_ATTACK_START           = 170,
	 MODIFIER_EVENT_ON_ATTACK                 = 171,
	 MODIFIER_EVENT_ON_ATTACK_LANDED          = 172,
	 MODIFIER_EVENT_ON_ATTACK_FAIL            = 173,
	 MODIFIER_EVENT_ON_ATTACK_ALLIED          = 174,
	 MODIFIER_EVENT_ON_PROJECTILE_DODGE       = 175,
	 MODIFIER_EVENT_ON_ORDER                  = 176,
	 MODIFIER_EVENT_ON_UNIT_MOVED             = 177,
	 MODIFIER_EVENT_ON_ABILITY_START          = 178,
	 MODIFIER_EVENT_ON_ABILITY_EXECUTED       = 179,
	 MODIFIER_EVENT_ON_ABILITY_FULLY_CAST     = 180,
	 MODIFIER_EVENT_ON_BREAK_INVISIBILITY     = 181,
	 MODIFIER_EVENT_ON_ABILITY_END_CHANNEL    = 182,
	 MODIFIER_EVENT_ON_PROCESS_UPGRADE        = 183,
	 MODIFIER_EVENT_ON_REFRESH                = 184,
	 MODIFIER_EVENT_ON_TAKEDAMAGE             = 185,
	 MODIFIER_EVENT_ON_DEATH_PREVENTED        = 186,
	 MODIFIER_EVENT_ON_STATE_CHANGED          = 187,
	 MODIFIER_EVENT_ON_ORB_EFFECT             = 188,
	 MODIFIER_EVENT_ON_PROCESS_CLEAVE         = 189,
	 MODIFIER_EVENT_ON_DAMAGE_CALCULATED      = 190,
	 MODIFIER_EVENT_ON_ATTACKED               = 191,
	 MODIFIER_EVENT_ON_DEATH                  = 192,
	 MODIFIER_EVENT_ON_RESPAWN                = 193,
	 MODIFIER_EVENT_ON_SPENT_MANA             = 194,
	 MODIFIER_EVENT_ON_TELEPORTING            = 195,
	 MODIFIER_EVENT_ON_TELEPORTED             = 196,
	 MODIFIER_EVENT_ON_SET_LOCATION           = 197,
	 MODIFIER_EVENT_ON_HEALTH_GAINED          = 198,
	 MODIFIER_EVENT_ON_MANA_GAINED            = 199,
	 MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT  = 200,
	 MODIFIER_EVENT_ON_HERO_KILLED            = 201,
	 MODIFIER_EVENT_ON_HEAL_RECEIVED          = 202,
	 MODIFIER_EVENT_ON_BUILDING_KILLED        = 203,
	 MODIFIER_EVENT_ON_MODEL_CHANGED          = 204,
	 MODIFIER_EVENT_ON_MODIFIER_ADDED         = 205,
	 MODIFIER_PROPERTY_TOOLTIP                = 206,
	 MODIFIER_PROPERTY_MODEL_CHANGE           = 207,
	 MODIFIER_PROPERTY_MODEL_SCALE            = 208,
	 MODIFIER_PROPERTY_IS_SCEPTER             = 209,
	 MODIFIER_PROPERTY_IS_SHARD               = 210,
	 MODIFIER_PROPERTY_RADAR_COOLDOWN_REDUCTION = 211,
	 MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS = 212,
	 MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND = 213,
	 MODIFIER_PROPERTY_LIFETIME_FRACTION      = 214,
	 MODIFIER_PROPERTY_PROVIDES_FOW_POSITION  = 215,
	 MODIFIER_PROPERTY_SPELLS_REQUIRE_HP      = 216,
	 MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP     = 217,
	 MODIFIER_PROPERTY_DISABLE_TURNING        = 218,
	 MODIFIER_PROPERTY_IGNORE_CAST_ANGLE      = 219,
	 MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE   = 220,
	 MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL = 221,
	 MODIFIER_PROPERTY_OVERRIDE_ABILITY_SPECIAL_VALUE = 222,
	 MODIFIER_PROPERTY_ABILITY_LAYOUT         = 223,
	 MODIFIER_EVENT_ON_DOMINATED              = 224,
	 MODIFIER_PROPERTY_TEMPEST_DOUBLE         = 225,
	 MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE = 226,
	 MODIFIER_EVENT_ON_ATTACK_FINISHED        = 227,
	 MODIFIER_PROPERTY_IGNORE_COOLDOWN        = 228,
	 MODIFIER_PROPERTY_CAN_ATTACK_TREES       = 229,
	 MODIFIER_PROPERTY_VISUAL_Z_DELTA         = 230,
	 MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION = 231,
	 MODIFIER_PROPERTY_DONT_GIVE_VISION_OF_ATTACKER = 232,
	 MODIFIER_PROPERTY_TOOLTIP2               = 233,
	 MODIFIER_EVENT_ON_ATTACK_RECORD_DESTROY  = 234,
	 MODIFIER_EVENT_ON_PROJECTILE_OBSTRUCTION_HIT = 235,
	 MODIFIER_PROPERTY_SUPPRESS_TELEPORT      = 236,
	 MODIFIER_EVENT_ON_ATTACK_CANCELLED       = 237,
	 MODIFIER_PROPERTY_SUPPRESS_CLEAVE        = 238,
	 MODIFIER_PROPERTY_BOT_ATTACK_SCORE_BONUS = 239,
	 MODIFIER_PROPERTY_ATTACKSPEED_REDUCTION_PERCENTAGE = 240,
	 MODIFIER_PROPERTY_MOVESPEED_REDUCTION_PERCENTAGE = 241,
	 MODIFIER_PROPERTY_ATTACK_WHILE_MOVING_TARGET = 242,
	 MODIFIER_PROPERTY_ATTACKSPEED_PERCENTAGE = 243,
	 MODIFIER_EVENT_ON_ATTEMPT_PROJECTILE_DODGE = 244,
	 MODIFIER_FUNCTION_LAST                   = 245,
	 MODIFIER_FUNCTION_INVALID                = 255,
};

class CDOTA_BuffParticle
{
public:
	int32_t m_iIndex; //0x0000 
	int32_t m_iPriority; //0x0004 
	bool m_bDestroyImmediatly; //0x0008 
	bool m_bStatusEffect; //0x0009 
	bool m_bHeroEffect; //0x000A 
	bool m_bOverheadEffectOffset; //0x000B 

}; //Size=0x000C

class CDOTA_Buff
{
public:
	inline const char* GetName()
	{
		return *reinterpret_cast<const char**>(reinterpret_cast<uintptr_t>(this) + Schema::m_name);
	}

	inline float GetDuration()
	{
		return *reinterpret_cast<float*>(reinterpret_cast<uintptr_t>(this) + Schema::m_flDuration);
	}

	inline float GetDieTime()
	{
		return *reinterpret_cast<float*>(reinterpret_cast<uintptr_t>(this) + Schema::m_flDieTime);
	}

	inline int GetStackCount()
	{
		return *reinterpret_cast<int*>(reinterpret_cast<uintptr_t>(this) + Schema::m_iStackCount);
	}

	inline C_BaseEntity* GetCaster()
	{
		return static_cast<C_BaseEntity*>(I::EntitySystem->GetBaseEntityFromHandle(
			*reinterpret_cast<unsigned long*>(reinterpret_cast<uintptr_t>(this) + Schema::m_hCaster)));
	}

	inline C_DOTABaseAbility* GetAbility()
	{
		return static_cast<C_DOTABaseAbility*>(I::EntitySystem->GetBaseEntityFromHandle(
			*reinterpret_cast<unsigned long*>(reinterpret_cast<uintptr_t>(this) + Schema::m_hAbility)));
	}

	inline C_BaseEntity* GetParent()
	{
		return static_cast<C_BaseEntity*>(I::EntitySystem->GetBaseEntityFromHandle(
			*reinterpret_cast<unsigned long*>(reinterpret_cast<uintptr_t>(this) + Schema::m_hParent)));
	}

	//inline bool IsMarkedForDeletion()
	//{
	//	return *reinterpret_cast<char*>(reinterpret_cast<uintptr_t>(this) + Schema::m_bAuraFlags) & (1 << 3);
	//}

	// allocates one CDOTA_BuffParticle and copies those values there
	void AddParticle(int particle, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect)
	{
		typedef void(__thiscall* Fn)(CDOTA_Buff*, int, bool, bool, int, bool, bool);
		reinterpret_cast<Fn>(Signatures::CDOTA_Buff__AddParticle)(this, particle, bDestroyImmediately, bStatusEffect, iPriority, bHeroEffect, bOverheadEffect);
	}

	//inline bool GetFunctionValue(modifierfunction function, void** variant, void* parameters)
	//{
	//	CDOTA_ModifierManager::BuffModifier_t* buffMod = reinterpret_cast<CDOTA_ModifierManager::BuffModifier_t**>(
	//		reinterpret_cast<uintptr_t>(this) + (Schema::m_hAuraUnits + sizeof(CUtlVector<int>)))[function];

	//	if (!buffMod)
	//		return false;

	//	int64_t* unk2 = reinterpret_cast<int64_t*>(
	//		*reinterpret_cast<uintptr_t*>(reinterpret_cast<uintptr_t>(this) + ofs + (Schema::m_hAuraUnits + 24) + 8)
	//		+ reinterpret_cast<uintptr_t>(this));

	//	if ((int8_t)buffMod & 1)
	//		buffMod = *(char **)&buffMod[*unk2 - 1];

	//	*variant = ((void* (*) (int64_t *, void*))buffMod)(unk2, parameters);
	//	variant[1] = v8;
	//	return true;
	//}

}; //Size=0x00C8

class CDOTA_Orb
{
private:
	std::byte pad_0x0000[0x10]; //0x0000
public:
	DWORD m_hCaster; //0x0010 
	DWORD m_hAbility; //0x0014 

}; //Size=0x0018

class CModifierParams
{
public:
	static CModifierParams& s_Default()
	{
		return *reinterpret_cast<CModifierParams*>(Schema::CModifierParams__s_Default);
	}
}; //Size=0x00A0

class CDOTA_ModifierManager
{
public:
	struct BuffModifier_t
	{
		CDOTA_Buff* m_pModifier;
		void* m_pFn;
	};
private:
	std::byte pad_0x0000[0x8]; //0x0000
public:
	unsigned long m_hModifierParent; //0x0008 
private:
	std::byte pad_0x000C[0x4]; //0x000C
public:
	CUtlVector<CDOTA_Buff*> m_pBuffs; //0x0010 
	CUtlVector<CUtlVector<BuffModifier_t>> m_pModFuncs; //0x0028 
	char m_ModFuncIndexes[MODIFIER_FUNCTION_LAST]; //0x0040 
	int16_t m_nHasTruesightForTeam; //0x010C 
	int16_t m_nHasTruesightForTeamValid; //0x010E 
	int16_t m_nProvidesFOWPositionForTeam; //0x0110 
	int16_t m_nProvidesFOWPositionForTeamValid; //0x0112 
	int32_t m_iBuffIndex; //0x0114 
	int32_t m_iLockRefCount; //0x0118 
private:
	std::byte pad_0x011C[0x4]; //0x011C

	struct CReturn
	{
		int		m_int;
		float	m_float;
		int64_t	m_qword;
	};
public:

	inline CDOTA_Buff* AddNewModifier(C_BaseEntity* caster, C_DOTABaseAbility* ability, const char* name, KeyValues* data)
	{
		typedef CDOTA_Buff* (__thiscall* AddNewModifierFn) (CDOTA_ModifierManager*, C_BaseEntity*, C_DOTABaseAbility*, const char*, KeyValues*, int, const void*);
		return reinterpret_cast<AddNewModifierFn>(Signatures::CDOTA_ModifierManager__AddNewModifier)(this, caster, ability, name, data, 0, nullptr);
	}

	float GetModifier_Constant_Additive_Internal(modifierfunction func, CModifierParams& params, bool positiveOnly)
	{
		uint8_t funcIndex = m_ModFuncIndexes[func];
		if (funcIndex == (uint8_t)-1 || !&m_pModFuncs[funcIndex])
			return 0.f;

		float out = 0.f;

		for (int i = 0; i < m_pModFuncs[funcIndex].Count(); ++i)
		{
			CReturn arg;

			CReturn* ret = reinterpret_cast<CReturn* (*) (CDOTA_Buff*, CReturn&, CModifierParams&)>
				(m_pModFuncs[funcIndex][i].m_pFn)
				(m_pModFuncs[funcIndex][i].m_pModifier, arg, params);

			if (!positiveOnly || 0.f < ret->m_float)
				out += ret->m_float;
		}

		return out;
	}

	float GetModifier_Constant_Highest_Internal(modifierfunction func, CModifierParams& params)
	{
		uint8_t funcIndex = m_ModFuncIndexes[func];
		if (funcIndex == (uint8_t)-1 || !&m_pModFuncs[funcIndex])
			return 0.f;

		float out = 0.f;

		for (int i = 0; i < m_pModFuncs[funcIndex].Count(); ++i)
		{
			CReturn arg;

			CReturn* ret = reinterpret_cast<CReturn* (*) (CDOTA_Buff*, CReturn&, CModifierParams&)>
				(m_pModFuncs[funcIndex][i].m_pFn)
				(m_pModFuncs[funcIndex][i].m_pModifier, arg, params);

			if (out < ret->m_float)
				out = ret->m_float;
		}

		return out;
	}

	float GetModifier_Percentage_Additive_Internal(modifierfunction func, CModifierParams& params, bool positiveOnly, bool negativeOnly)
	{
		uint8_t funcIndex = m_ModFuncIndexes[func];
		if (funcIndex == (uint8_t)-1 || !&m_pModFuncs[funcIndex])
			return 1.f;

		float out = 100.f;

		for (int i = 0; i < m_pModFuncs[funcIndex].Count(); ++i)
		{
			CReturn arg;

			CReturn* ret = reinterpret_cast<CReturn* (*) (CDOTA_Buff*, CReturn&, CModifierParams&)>
				(m_pModFuncs[funcIndex][i].m_pFn)
				(m_pModFuncs[funcIndex][i].m_pModifier, arg, params);

			if (negativeOnly)
			{
				if (0.f > ret->m_float)
					out += ret->m_float;
			}
			else if (positiveOnly)
			{
				if (0.f < ret->m_float)
					out += ret->m_float;
			}
			else
				out += ret->m_float;
		}

		return out * 0.01f;
	}

	float GetModifier_Percentage_Highest_Internal(modifierfunction func, CModifierParams& params)
	{
		uint8_t funcIndex = m_ModFuncIndexes[func];
		if (funcIndex == (uint8_t)-1 || !&m_pModFuncs[funcIndex])
			return 1.f;

		float out = 100.f;

		for (int i = 0; i < m_pModFuncs[funcIndex].Count(); ++i)
		{
			CReturn arg;

			CReturn* ret = reinterpret_cast<CReturn* (*) (CDOTA_Buff*, CReturn&, CModifierParams&)>
				(m_pModFuncs[funcIndex][i].m_pFn)
				(m_pModFuncs[funcIndex][i].m_pModifier, arg, params);

			if (out < ret->m_float)
				out = ret->m_float;
		}

		return out * 0.01f;
	}
}; //Size=0x0130